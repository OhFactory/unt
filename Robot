public class Robot{

private Vector3 TargetPosition;
//private Vector3 TargetAngle;//Foward
private float Distance;

[SerializeField]
private Transform Target;
[SerializeField]
private Transform Hand;

[SerializeField]
private Parts[] Partss;
[SerializeField]
private Parts[] Vertical_;
[SerializeField]
private Parts[] Horizontal_;
[SerializeField]
private Transform Bone_Hand;


void Update(){
  if(Vector3.Distance(TargetPosition-Hand)<0.1f) return;
  
  Calc();

}

private Vector3 NowHandPosition(){
Vector3 Position;

  for(int i=0;i<Vertical_.Length;i++){
    Angle.y+=Vertical[i].Position();
  }
  for(int i=0;i<Horizontal_.Length;i++){
    Angle.x+=Horizontal[i].Position();
  }

  return Position;
}

private void Calc(){
TargetPosition=Target.position+Target.forward*Distance;
Vector3 LocalTargetPosition=TargetPosition-transform.position;

if(LocalTargetPosition.Magnitude>LocalHandPosition.Magnitude){
  for(int i=0;i<Parts[i]&LocalTargetPosition
}//target is more far from origin
else{

}


Vector3 TempV=TargetPosition-Position;
  if(Math.Abs(TempV.x)>Math.Abs(tempV.y))VerticalFunc(tempV);
  else HorizontalFunc();
}

private Vector3 VerticalFunc(Vector3 PositionDiffer)
{
  bool SW;
  for(int i=0;i<Vertical_.Length;i++){
    if(Vertical[i].Rotate
  }
}
private void HorizonFunc(Vector3 PositionDiffer){

}


private void RotateVertical(){

}
private void RotateHorizon(){

}

}
