public class Robot{

private Vector3 TargetPosition;
private float Distance;

[SerializeField]
private Transform Target;
[SerializeField]
private Transform Hand;
[SerializeField]
private Vector3 LocalPositionOri_;

[SerializeField]
private Parts[] Partss;
[SerializeField]
private Parts[] Vertical_;
[SerializeField]
private Parts[] Horizontal_;
[SerializeField]
private Transform Bone_Hand;


void Update(){
  if(Vector3.Distance(TargetPosition-Hand)<0.1f) return;
  
  Calc();

}

private Vector3 NowHandPosition(){
Vector3 Position;

  for(int i=0;i<Parts.Length;i++){
    Position+=Parts[i].position;
  }
  return Position;
}

private void Calc(){
TargetPosition=Target.position+Target.forward*Distance;
Vector3 LocalTargetPosition=TargetPosition-transform.position;

float Dist1 =LocalTargetPosition.Magnitude;

if(Dist1>LocalHandPosition.Magnitude){
  for(int i=0;Dist1>Vector3.Distance(NowHandPosition()-transform.position);){
    if(i>=Parts.Length)return;
    
    Parts[i].Rotate(TargetPosition);
    i++;
  }
}//target is more far from origin
else{
  for(int i=0;Dist1<Vector3.Distance(NowHandPosition()-transform.position);){
    if(i>=Parts.Length)return;
    
    Parts[i].Rotate(TargetPosition);
    i++;
  }
}


Vector3 TempV=TargetPosition-Position;
  if(Math.Abs(TempV.x)>Math.Abs(tempV.y))VerticalFunc(tempV);
  else HorizontalFunc();
}

private Vector3 VerticalFunc(Vector3 PositionDiffer)
{
  bool SW;
  for(int i=0;i<Vertical_.Length;i++){
    if(Vertical[i].Rotate
  }
}
private void HorizonFunc(Vector3 PositionDiffer){

}


private void RotateVertical(){

}
private void RotateHorizon(){

}
Parts{

[SerializeField]
private string type="Rotate";
[SerializeField]
private Vector3 RotateAngle;
[SerializeField]
private float RotateMaxAngle;
[SerializeField]
private float RotateSpeed;
[SerializeField]
private float Distance;

public Vector3 Position(){
  return transform.forward*Distance;
}
public bool CheckRotate(){
}

public bool Rotate(Vector3 TargetPosition,Vector3 NowHandPosition,float MaxDistance){
  if(Vector3.Dot(NowHandPosition.normalized,TargetPosition-transform.position)<0){
  
  }//target is behind
  else{
  
  }//target front
}

}
}
2
